rientrF[omegaF <= omegaFF] <- runif(defF[t - 1, mc]) * min(omegaF[omegaF > omegaFF])
p[omegaF <= omegaFF] <- mean(p[omegaF > omegaFF])
}
rientrB <- matrix(data = 0, ncol = B)
if (defB[t - 1, mc] == B) {
rientrB <- pmax(0.2, matrix(rnorm(B) + parpatr * mean(p), ncol = B))
} else {
rientrB[omegaB <= omegaBB] <- runif(defB[t - 1, mc]) * min(omegaB[omegaB > omegaBB])
}
RIENTR[t, mc] <- sum(rientrF) + sum(rientrB)
DIV1[t, mc] <- DIV[t - 1, mc] - RIENTR[t, mc]
PSALVA[t, mc] <- 0
if (-(DIV1[t, mc]) > OMEGAH[t - 1, mc]) {
PSALVA[t, mc] <- -(DIV1[t, mc]) - OMEGAH[t - 1, mc]
DIV1[t, mc] <- -OMEGAH[t - 1, mc]
}
# firms
pigrF[omegaF <= omegaFF] <- 0
rB[omegaF <= omegaFF] <- 2 * rCB
betaFres[omegaF <= omegaFF] <- 0
betaFreal[omegaF <= omegaFF] <- 0
y[omegaF <= omegaFF] <- 0
yres[omegaF <= omegaFF] <- 0
d[omegaF <= omegaFF] <- 0.5
aripigrF[omegaF <= omegaFF] <- 0
scorte[omegaF <= omegaFF] <- 0
omegaF2[omegaF <= omegaFF] <- rientrF[omegaF <= omegaFF]
betaF[omegaF <= omegaFF] <- omegaF[omegaF <= omegaFF]
intF[omegaF <= omegaFF] <- 0
lab[omegaF <= omegaFF] <- 1
omegaF[omegaF <= omegaFF] <- rientrF[omegaF <= omegaFF]
#banks
pigrB[omegaB <= omegaBB] <- 0
betaBres[omegaB <= omegaBB] <- 0
deltaB[omegaB <= omegaBB] <- 0
deltaB_1[omegaB <= omegaBB] <- 0
rD[omegaB <= omegaBB] <- rCB
rB1[omegaB <= omegaBB] <- mean(rB1)
db[omegaB <= omegaBB] <- 0.5
aripigrB[omegaB <= omegaBB] <- 0
pdebtB[omegaB <= omegaBB] <- 0
betaBreal[omegaB <= omegaBB] <- 0
k2[omegaB <= omegaBB] <- 0
omegaB[omegaB <= omegaBB] <- rientrB[omegaB <= omegaBB]
omegaB3 <- omegaB
# CREDIT MARKET
# firms' credit demand
numero = runif(Fi)
levat[pigrF2/(omegaF2 + betaFreal) > rB & scorte < (parsc * y)] = levat[pigrF2/(omegaF2 + betaFreal) > rB & scorte < (parsc * y)] *
(1 + adjFleva * numero[(pigrF2/(omegaF2 + betaFreal)) > rB & scorte < (parsc * y)])
levat[pigrF2/(omegaF2 + betaFreal) == rB & scorte < (parsc * y)] = levat[pigrF2/(omegaF2 + betaFreal) == rB & scorte < (parsc * y)]
levat[(pigrF2/(omegaF2 + betaFreal)) < rB | scorte >= (parsc * y)] = levat[(pigrF2/(omegaF2 + betaFreal)) < rB | scorte >= (parsc *
y)] * (1 - adjFleva * numero[(pigrF2/(omegaF2 + betaFreal)) < rB | scorte >= (parsc * y)])
levat = pmax(levat, levatmin)
minbetaF = pmax(ceiling(parlab * lab) * max(w), max(w) - omegaF)
betaF = pmax(omegaF * levat, minbetaF)
rB2 = (riskprop^levat)/100
# interest rate setting: banks
numero = runif(B)
numero2 = runif(B)
rB1[betaBres > 0] = rB1[betaBres > 0] * (1 - adjB * numero[betaBres > 0])
rB1[betaBres == 0 & numero2 > adjrB] = rB1[betaBres == 0 & numero2 > adjrB] * (1 + adjB * numero[betaBres == 0 & numero2 > adjrB])
rB1[betaBres == 0 & numero2 <= adjrB] = rB1[betaBres == 0 & numero2 <= adjrB]
matF <- matrix(nrow = Fi, ncol = B)
# interest rate matrices
for (j in 1:B) {
matF[1:Fi, j] = t(rB2)
}
matB <- matrix(nrow = Fi, ncol = B)
for (j in 1:Fi) {
matB[j, 1:B] = rB1
}
matFB = rCB + matF + matB
# banks' credit supply
m = M[t - 1, mc] * (omegaB/sum(omegaB))
k1 = reg1 * omegaB #MODIFICARE?
k2 = reg2 * omegaB + deltaB + m
betaB = pmin(k1, k2)
intCB = rCB * m
INTCBb[t, mc] = sum(intCB)
# CREDIT MARKET MATCHING
BETAF[t, mc] = sum(betaF)
BETAB[t, mc] = sum(betaB)
betaBres = betaB
betaBmax = betaBup * betaB
betaFres = betaF
crednet = matrix(data = 0, nrow = Fi, ncol = B)
BETAFres = sum(betaFres)
BETABres = sum(betaBres)
contr = 0
index = 0
vec01 = matrix(ncol = Fi)
while (BETAFres > 0 & BETABres > 0 & contr == 0) {
index = index + 1
vecF = sample(Fi)
vec01[1:Fi] = 0
vec01[betaFres[vecF] > 0] = 1
vecF = vecF * vec01
indvecF = vecF[which(vecF != 0)]
for (j in 1:length(indvecF)) {
indF = indvecF[j]
vecB01 = matrix(data = 1, ncol = B)
numero = runif(B)
vecB01[betaBres == 0 | crednet[indF, ] > 0 | numero > sogliaC] = NA
if (sum(vecB01, na.rm = T) > 0) {
rB1mod = rB1 * vecB01
minrB1mod = min(rB1mod, na.rm = T)
indB = which(rB1mod == minrB1mod)
indB = indB[1]
betaFeff = min(betaBres[indB], betaBmax[indB])
betaFeff = min(betaFeff, betaFres[indF])
betaFres[indF] = betaFres[indF] - betaFeff
betaBres[indB] = betaBres[indB] - betaFeff
crednet[indF, indB] = betaFeff
}
}
BETAFres = sum(betaFres)
BETABres = sum(betaBres)
crednet22 = crednet
crednet22[, betaBres == 0] = 1
crednet22[betaFres == 0, ] = 1
contr = prod(ceiling(apply(t(crednet22), 1, prod)))
}
INDEXB[t, mc] = index
betaFreal = betaF - betaFres
gammaF = omegaF + betaFreal
betaBreal = betaB - betaBres
gammaB = omegaB + betaBreal
lambdaB3 = betaBreal/omegaB
concentr = max(crednet)/betaBreal
concentr2 = max(crednet)/betaB
concentr3 = max(crednet)/k2
# LABOUR MARKET MATCHING
unemp = matrix(data = 1, ncol = H)
unemp2 = matrix(data = 1, ncol = H)
gammaFres = gammaF
labnet = matrix(data = 0, nrow = (Fi + 1), ncol = H)
# Public workers
vecdeilav = sample(H)
indvecPW = vecdeilav[1:pw]
unemp[indvecPW] = 0
unemp2[indvecPW] = NA
labnet[Fi + 1, indvecPW] = w[indvecPW]
Gw[t, mc] = sum(w[indvecPW])
#############################################################
contr = 0
index = 0
vec01 = matrix(ncol = Fi)
while (contr == 0) {
index = index + 1
vecF = sample(Fi)
vec01[1:Fi] = 0
vec01[gammaFres[vecF] >= min(w)] = 1
vecF = vecF * vec01
indvecF = vecF[which(vecF != 0)]
for (j in 1:length(indvecF)) {
indF = indvecF[j]
numero = runif(H)
sfigalab = matrix(data = 0, ncol = H)
sfigalab[numero > sogliaL] = 1
wH1mod = w * unemp2
minwH1mod = min(wH1mod[sfigalab == 0], na.rm = T)
if (sum(unemp) > 0 & gammaFres[indF] >= minwH1mod) {
indH = which(wH1mod == minwH1mod)
indH = indH[1]
gammaFres[indF] = gammaFres[indF] - minwH1mod
unemp[indH] = 0
unemp2[indH] = NA
labnet[indF, indH] = minwH1mod
}
}
if (sum(unemp) == 0) {
contr = 1
} else if (length(which(gammaFres < min(w[unemp == 1]))) == Fi) {
contr = 1
}
}
# dividends
cash = cash + (omegaH/sum(omegaH)) * DIV1[t - 1, mc]
weff = (1 - tauH) * colSums(labnet)
# Governement expenditure, public deficits, etc.
Gs[t, mc] = 0
PDef[t, mc] = G[t, mc] + Gw[t, mc] + Gs[t, mc] + PSALVA[t, mc] + INTPDEBTB[t - 1, mc] - INTCB[t - 1, mc] - (TaxH[t - 1, mc] + TaxF[t -
1, mc] + TaxB[t - 1, mc]) - (TaxPatrF[t - 1, mc] + TaxPatrB[t - 1, mc] + TaxPatrH[t - 1, mc])
PDebt[t, mc] = PDebt[t - 1, mc] + PDef[t, mc]
PDebtB[t, mc] = sum(pdebtB)
PDebtCB[t, mc] = PDebt[t, mc] - PDebtB[t, mc]
INTCB[t, mc] = INTCBb[t, mc]
TaxH[t, mc] = sum(tauH * sum(labnet))
# consumption function
cons = c1 * weff + c2 * (deltaH + cash)
cons = pmax(cons, mean(p))
cons = pmin(cons, weff + deltaH + cash)
# wage updating
numero = runif(H)
numero2 = runif(H)
w[unemp == 0 & numero2 > adjemp] = w[unemp == 0 & numero2 > adjemp] * (1 + adjH * numero[unemp == 0 & numero2 > adjemp])
w[unemp == 0 & numero2 <= adjemp] = w[unemp == 0 & numero2 <= adjemp]
w[unemp == 1] = w[unemp == 1] * (1 - adjH * numero[unemp == 1])
w = pmax(w, (1 + tauH) * max(p)) # reservation wage (lower bound)
GAMMAFres[t, mc] = sum(gammaFres)
UNEMP[t, mc] = sum(unemp)
ur[t, mc] = UNEMP[t, mc]/H # unemployment rate
INDEXH[t, mc] = index
labnet2 = matrix(data = 0, nrow = (Fi + 1), ncol = H)
labnet2[labnet > 0] = 1
lab = matrix(rowSums(labnet2[1:Fi, ]), ncol = Fi)
# goods supply
y = phi * lab + scorte
Y[t, mc] = sum(y) # aggregate production
intF_1 = intF
# firm costs
wb = rowSums(labnet[1:Fi, ])
wb = t(wb)
intF = rowSums(matFB * crednet)
rB = intF/rowSums(crednet)
rB[which(is.na(rB))] <- Inf
intF = t(intF)
rB = t(rB)
# price updating
numero = runif(Fi)
numero2 = runif(Fi)
p[yres == 0 & y > 0] = p[yres == 0 & y > 0] * (1 + adjF * numero[yres == 0 & y > 0])
p[y == 0 & numero2 > adjprice] = p[y == 0 & numero2 > adjprice] * (1 - adjF * numero[y == 0 & numero2 > adjprice])
p[yres > 0 & numero2 > adjprice] = p[yres > 0 & numero2 > adjprice] * (1 - adjF * numero[yres > 0 & numero2 > adjprice])
p[y > 0] = pmax(p[y > 0], ((wb[y > 0] + intF_1[y > 0])/y[y > 0]))
# GOODS MARKET MATCHING
YRES[t, mc] = sum(y)
yres = y
cres = c(cons, G[t, mc])
qeff = matrix(data = 0, ncol = Fi)
CRES[t, mc] = sum(cres)
CONS[t, mc] = CRES[t, mc]
goodnet = matrix(data = 0, nrow = (H + 1), ncol = Fi)
contr = 0
index = 0
vec01 = matrix(ncol = H)
while (YRES[t, mc] > 0 & CRES[t, mc] > 0 & contr == 0) {
index = index + 1
vecH = sample(H + 1)
vec01[1:(H + 1)] = 0
vec01[cres[vecH] > min(p)] = 1
vecH = vecH * vec01
indvecH = vecH[which(vecH != 0)]
for (j in 1:length(indvecH)) {
indH = indvecH[j]
vecF01 = matrix(data = 1, ncol = Fi)
numero = runif(Fi)
vecF01[yres == 0 | p > cres[indH] | numero > sogliaG] = NA
if (sum(vecF01, na.rm = T) > 0) {
pF1mod = p * vecF01
minpF1mod = min(pF1mod, na.rm = T)
indF = which(pF1mod == minpF1mod)
indF = indF[1]
yres[indF] = yres[indF] - 1
cres[indH] = cres[indH] - minpF1mod
qeff[indF] = qeff[indF] + 1
goodnet[indH, indF] = goodnet[indH, indF] + minpF1mod
}
}
yres2 = yres
yres2[yres2 > 0] = 1
pres = p * yres2
pres[pres == 0] = NA
if (min(pres, na.rm = T) > max(cres)) {
contr = 1
}
YRES[t, mc] = sum(yres)
CRES[t, mc] = sum(cres)
}
Geff[t, mc] = sum(goodnet[H + 1, ])
goodnet = goodnet[1:H, ]
INVENT[t, mc] = sum(yres)
INDEXC[t, mc] = index
scorte = yres # inventories
SCORTE[t, mc] = sum(scorte) # aggregate inventories
# household expenditure
spesa = rowSums(goodnet)
spesa = t(spesa)
SPESA[t, mc] = sum(spesa)
s = weff - spesa + intH # individual savings
# banks buy public bonds
if (PDebt[t, mc] > 0 & sum(k2) - sum(betaBreal) >= PDebt[t, mc]) {
pdebtB = PDebt[t, mc] * ((k2 - betaBreal)/(sum(k2) - sum(betaBreal)))
} else if (PDebt[t, mc] > 0 & sum(k2) - sum(betaBreal) < PDebt[t, mc]) {
pdebtB = k2 - betaBreal
} else {
pdebtB[1:B] = 0
}
intPdebtB = rCB * pdebtB
INTPDEBTB[t, mc] = sum(intPdebtB)
# DEPOSIT MATCHING
rD_1 = rD
numero = runif(B)
rD[k2 - betaBreal - pdebtB > 0] = rD[k2 - betaBreal - pdebtB > 0] * (1 - adjB * numero[k2 - betaBreal - pdebtB > 0])
rD[k2 - betaBreal - pdebtB <= 0] = min(rD[k2 - betaBreal - pdebtB <= 0] * (1 + adjB * numero[k2 - betaBreal - pdebtB <= 0]), rCB)
numero = runif(H)
rD1[sres > 0] = rD1[sres > 0] * (1 - adjH * numero[sres > 0])
rD1[sres == 0] = rD1[sres == 0] * (1 + adjH * numero[sres == 0])
sres = deltaH + cash + s
sres[sres > (parpatr * mean(p))] = (1 - taupatrH) * sres[sres > (parpatr * mean(p))]
TaxPatrH[t, mc] = sum(taupatrH * sres[sres > (parpatr * mean(p))])
depnet = matrix(data = 0, nrow = B, ncol = H)
rD1res = rD1
contr = 0
index = 0
vecH01 = matrix(ncol = H)
intH = matrix(data = 0, ncol = H)
while (sum(sres) > 0 & contr == 0) {
index = index + 1
indvecB = sample(B)
for (j in 1:length(indvecB)) {
indB = indvecB[j]
vecH01[1:H] = 1
numero = runif(H)
vecH01[sres == 0 | rD1 > rD[indB] | numero > sogliaD] = NaN
if (sum(vecH01, na.rm = T) > 0) {
rD1mod = rD1 * vecH01
minrD1mod = min(rD1mod, na.rm = T)
indH = which(rD1mod == minrD1mod)
indH = indH[1]
depnet[indB, indH] = sres[indH]
sres[indH] = 0
}
rD1res[sres == 0] = NaN
if (min(rD1res, na.rm = T) > max(rD)) {
contr = 1
}
}
}
INDEXD[t, mc] = index
cash = sres
revenue = colSums(goodnet)
# Nominal value of production
Ptot[t, mc] = p %*% t(qeff)
Ptot2[t, mc] = p %*% t(y)
Ptot3[t, mc] = Ptot2[t, mc] + Gw[t, mc]
Pm[t, mc] = Ptot[t, mc]/(sum(qeff))
# Firms' profit
pigrFlord = revenue - wb - intF
pigrFlord2 = pigrFlord + aripigrF
pigrFutile = pmax(pigrFlord2, 0)
aripigrF = pmin(pigrFlord2, 0)
pigrFtax = tauF * pigrFutile
pigrF = pigrFlord - pigrFtax
pigrF2 = pigrFlord
TaxF[t, mc] = sum(pigrFtax)
# firms' dividend policy
numero = runif(Fi)
d[yres == 0 & y > 0] = d[yres == 0 & y > 0] * (1 - adjF * numero[yres == 0 & y > 0])
d[y == 0] = d[y == 0] * (1 + adjF * numero[y == 0])
d[yres > 0] = d[yres > 0] * (1 + adjF * numero[yres > 0])
d = pmin(d, 1)
divF = matrix(data = 0, ncol = Fi)
divF[pigrF > 0] = d[pigrF > 0] * pigrF[pigrF > 0]
pigrF[pigrF > 0] = (1 - d[pigrF > 0]) * pigrF[pigrF > 0]
# firms' net worth updating
omegaFF = omegaFmin * omegaF
omegaF2 = omegaF
omegaF = omegaF + pigrF
omegaF[omegaF > (parpatr * mean(p))] = (1 - taupatrF) * omegaF[omegaF > (parpatr * mean(p))]
defF[t, mc] = length(which(omegaF <= omegaFF)) # number of firm defaults
vecdefF = matrix(data = 0, ncol = Fi)
vecdefF[omegaF <= omegaFF] = 1 - (omegaF[omegaF <= omegaFF] + betaFreal[omegaF <= omegaFF])/betaFreal[omegaF <= omegaFF]
vecdefF[vecdefF > 1] = 1
vecdefF[vecdefF < 0] = 0
vecdefF2 = matrix(data = 1, ncol = Fi)
vecdefF2[omegaF <= omegaFF] = 0
# non-performing loans
crednet2 <- crednet
for (j in 1:B) {
crednet2[, j] = crednet[, j] * t(vecdefF2)
}
intB = colSums(matFB * crednet2)
badB = as.matrix(vecdefF %*% crednet)
deltaB_1 = deltaB
deltaB = rowSums(depnet)
deltaB = t(deltaB)
# banks ' profit
pigrBlord = intB - rD_1 * deltaB_1 - intCB - badB + intPdebtB
pigrBlord2 = pigrBlord + aripigrB
pigrButile = pmax(pigrBlord2, 0)
aripigrB = pmin(pigrBlord2, 0)
pigrBtax = tauB * pigrButile
pigrB = pigrBlord - pigrBtax
TaxB[t, mc] = sum(pigrBtax)
numero = runif(B)
# banks' dividend policy
db[betaBres == 0 & betaBreal > 0] = db[betaBres == 0 & betaBreal > 0] * (1 - adjB * numero[betaBres == 0 & betaBreal > 0])
db[betaBreal == 0] = db[betaBreal == 0] * (1 + adjB * numero[betaBreal == 0])
db[betaBres > 0] = db[betaBres > 0] * (1 + adjB * numero[betaBres > 0])
db = pmin(db, 1)
divB = matrix(data = 0, ncol = B)
divB[pigrB > 0] = db[pigrB > 0] * pigrB[pigrB > 0]
pigrB[pigrB > 0] = (1 - db[pigrB > 0]) * pigrB[pigrB > 0]
# banks net worth updating
omegaBB = omegaBmin * omegaB
omegaB = omegaB + pigrB
omegaB[omegaB > (parpatr * mean(p))] = (1 - taupatrB) * omegaB[omegaB > (parpatr * mean(p))]
defB[t, mc] = length(which(omegaB <= omegaBB)) # number of bank defaults
indBdef = which(omegaB <= omegaBB)
# losses on bank deposits
depnet2 = depnet
vecRRdep = (omegaB[indBdef] + deltaB[indBdef])/deltaB[indBdef]
vecRRdep = pmax(vecRRdep, 0)
if (length(vecRRdep) > 0) {
for (j in 1:length(vecRRdep)) {
depnet[indBdef[j], ] = depnet2[indBdef[j], ] * vecRRdep[j]
}
}
deltaH = colSums(depnet)
omegaH = deltaH + cash
intH = rD %*% depnet
# wealt tax
TaxPatrF[t, mc] = sum(taupatrF * omegaF[omegaF > (parpatr * mean(p))]) #
TaxPatrB[t, mc] = sum(taupatrB * omegaB[omegaB > (parpatr * mean(p))]) #
# AGGREGATE VARIABLES UPDATING
DIV[t, mc] = sum(divB) + sum(divF)
OMEGAF[t, mc] = sum(omegaF)
OMEGAF0[t, mc] = sum(omegaF[omegaF > 0])
OMEGAB[t, mc] = sum(omegaB)
OMEGAB0[t, mc] = sum(omegaB[omegaB > 0])
OMEGAB3[t, mc] = sum(omegaB3)
OMEGAH[t, mc] = sum(omegaH)
DELTAH[t, mc] = sum(deltaH)
BETAFRES[t, mc] = sum(betaFres)
BETABRES[t, mc] = sum(betaBres)
BETABREAL[t, mc] = sum(betaBreal)
BETAFREAL[t, mc] = sum(betaFreal)
BADB[t, mc] = sum(badB)
GAMMAF[t, mc] = sum(gammaF)
GAMMAB[t, mc] = sum(gammaB)
PIGRF[t, mc] = sum(pigrFlord)
PIGRB[t, mc] = sum(pigrBlord)
LAMBDAF[t, mc] = BETAFREAL[t, mc]/OMEGAF0[t, mc]
LAMBDAB[t, mc] = BETABREAL[t, mc]/OMEGAB0[t, mc]
LAMBDAB3[t, mc] = BETABREAL[t, mc]/OMEGAB3[t, mc]
LEVAT[t, mc] = mean(levat)
RB1[t, mc] = mean(rB1)
RB2[t, mc] = mean(rB2)
Wtot[t, mc] = sum(weff)
Wm[t, mc] = mean(weff)
Wm0[t, mc] = mean(weff[unemp == 0])
INTF[t, mc] = sum(intF)
INTB[t, mc] = sum(intB)
rBm[t, mc] = INTF[t, mc]/BETAFREAL[t, mc]
INFL[t, mc] = Pm[t, mc]/Pm[t - 1, mc] - 1
INFLW0[t, mc] = Wm0[t, mc]/Wm0[t - 1, mc] - 1
numF[t, mc] = length(which(y + scorte > 0))
numB[t, mc] = length(which(betaBreal > 0))
CONCENTR[t, mc] = mean(concentr)
CONCENTR2[t, mc] = mean(concentr2)
CONCENTR3[t, mc] = mean(concentr3)
# CENTRAL BANK
M[t, mc] = 0.5 * M[t - 1, mc] + 0.5 * (BETAFRES[t, mc] - BETABRES[t, mc])
M[t, mc] = max(M[t, mc], 0)
}
}
print(paste("Elapsed time is ",proc.time()[3]-ptm[3],"seconds"))
layout(matrix(c(1, 4, 7, 2, 5, 8, 3, 6, 9), 3, 3))
layout.show(9)
plot(101:Time, Ptot3[101:Time], type = "l", log = "y", main = "GDP", xlab = "", ylab = "", ylog = TRUE) #To change the limits of y axis: ylim=c(10^3,10^5)
plot(101:Time, defF[101:Time], type = "l", main = "defaults: F(solid,l-axis),B(dash,r-axis)", xlab = "", ylab = "", lwd = 0.5)
par(new = T)
plot(101:Time, defB[101:Time], type = "l", main = "defaults: F(solid,l-axis),B(dash,r-axis)", xlab = "", ylab = "", lty = 2, lwd = 2, axes = F)
axis(4)
plot(101:Time, (OMEGAF0[101:Time]/Fi)/Pm[101:Time], type = "l", main = "Net worth: F(solid),B(dot),H(dash)", xlab = "", ylab = "", ylim = range(c((OMEGAF0[101:Time]/Fi)/Pm[101:Time], (OMEGAB0[101:Time]/B)/Pm[101:Time], (OMEGAH[101:Time]/H)/Pm[101:Time])))
lines(101:Time, (OMEGAB0[101:Time]/B)/Pm[101:Time], type = "l", lty = 4)
lines(101:Time, (OMEGAH[101:Time]/H)/Pm[101:Time], type = "l", lty = 2)
plot(101:Time, ur[101:Time], type = "l", main = "unemployment rate", xlab = "", ylab = "")
plot(101:Time, PDef[101:Time]/Ptot3[101:Time], type = "l", main = "government deficit", xlab = "", ylab = "")
plot(101:Time, rBm[101:Time], type = "l", main = "avg. int. rate(solid), infl. rate(dot)", xlab = "", ylab = "", ylim = range(c(rBm[101:Time],
INFL[101:Time])))
lines(101:Time, INFL[101:Time], type = "l", lty = 4)
plot(ur[101:Time], INFLW0[101:Time], main = "Phillips curve", xlab = "", ylab = "")
plot(101:Time, BETABRES[101:Time]/Pm[101:Time] - BETAFRES[101:Time]/Pm[101:Time], type = "l", main = "Credit mismatch", xlab = "", ylab = "")
plot(101:Time, LAMBDAF[101:Time], type = "l", main = "F lev (solid,l-axis), B exp (dash,r-axis)", xlab = "", ylab = "", lwd = 0.5)
par(new = T)
plot(101:Time, LAMBDAB[101:Time], type = "l", main = "", xlab = "", ylab = "", lty = 2, lwd = 2, axes = F)
axis(4)
library(PKSFC)
library(PKSFC)
q()
q()
source('~/.active-rstudio-document')
add2<-function(x,y){
x+y
}
add2(3,5)
above<-function(x,n){
use<-x>n
x[use]
x<-1:20
above(x,12)
above<-function(x,n){
use<-x>n
x[use]
}
above(x,12)
x<-1:20
above(x,12)
above<-function(x,n){
use<-x>n
x[use]
}
above<-function(x,n){
use<-x>n
x[use]
}
q()
load("~/Desktop/Coursera_R/pollutantmean.R")
q()
